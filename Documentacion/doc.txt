
Para obtener el valor de un bit en un tipo int, puedes utilizar el operador de bit a bit (&)
para realizar una operación AND entre el valor del int y un número binario que tenga un 1 
en la posición del bit que deseas comprobar y 0 en todas las demás posiciones.

Por ejemplo, si deseas comprobar el quinto bit del int valor, puedes realizar la operación:

python
Copy code
int quinto_bit = (valor & (1 << 4)) != 0;
En este caso, (1 << 4) es un número binario que tiene un 1 en la quinta posición (empezando desde cero),
es decir, 00010000 en binario. Luego, al realizar la operación AND entre valor y 00010000, obtendrás un 
número que tendrá un 1 en la quinta posición si y solo si el quinto bit de valor es 1.

Finalmente, el resultado de la operación valor & (1 << 4) será diferente de cero si el quinto bit es 1,
y será cero si el quinto bit es 0. Por lo tanto, la variable quinto_bit tendrá el valor 1 si el quinto
bit es 1, y tendrá el valor 0 si el quinto bit es 0.

En un microprocesador SAMD21 de la plataforma Arduino, la prioridad de las interrupciones se establece
 mediante el sistema de prioridades de interrupción (NVIC) del microcontrolador.

El SAMD21 tiene un total de 32 niveles de prioridad de interrupción numerados del 0 al 31, donde el nivel
 0 es la prioridad más alta y el nivel 31 es la prioridad más baja. Para establecer la prioridad de una
  interrupción, se debe configurar su nivel de prioridad en el registro correspondiente del NVIC.

En la plataforma Arduino, se puede usar la función "NVIC_SetPriority()" para establecer la prioridad
 de una interrupción. Esta función acepta como argumentos el número de la interrupción y su nivel de 
 prioridad, y se utiliza de la siguiente manera:

NVIC_SetPriority(interrupt_number, priority_level);
Donde "interrupt_number" es el número de la interrupción a configurar, y "priority_level" es el nivel 
de prioridad deseado, que debe ser un valor entero del 0 al 31.

En un microprocesador SAMD21 de la plataforma Arduino, la prioridad de las interrupciones se establece 
mediante el sistema de prioridades de interrupción (NVIC) del microcontrolador.

El SAMD21 tiene un total de 32 niveles de prioridad de interrupción numerados del 0 al 31, donde el nivel
 0 es la prioridad más alta y el nivel 31 es la prioridad más baja. Para establecer la prioridad de una
  interrupción, se debe configurar su nivel de prioridad en el registro correspondiente del NVIC.

En la plataforma Arduino, se puede usar la función "NVIC_SetPriority()" para establecer la prioridad de 
una interrupción. Esta función acepta como argumentos el número de la interrupción y su nivel de prioridad,
 y se utiliza de la siguiente manera:

NVIC_SetPriority(interrupt_number, priority_level);
Donde "interrupt_number" es el número de la interrupción a configurar, y "priority_level" es el nivel de 
prioridad deseado, que debe ser un valor entero del 0 al 31.


En un SAMD21, que es "External Interrupt Controller"
En el microcontrolador SAMD21, el "External Interrupt Controller" (EIC) es un periférico que se encarga de 
gestionar las interrupciones externas. El EIC es responsable de detectar los eventos de interrupción en los
 pines configurados para la detección de eventos externos, y de generar una interrupción al procesador para
  que éste pueda manejarla adecuadamente.

El EIC del SAMD21 es altamente configurable, y puede ser utilizado para detectar eventos en los pines de entrada
 digital, pines analógicos, y en los pines de entrada de señales externas, como pulsos, cambios de nivel,
  flancos de subida o de bajada, entre otros. Además, el EIC puede ser configurado para activar interrupciones
   tanto en los flancos de subida y bajada de la señal, como también en una dirección específica (solo en flanco 
   de subida o solo en flanco de bajada).

El EIC del SAMD21 puede ser utilizado en conjunto con otros periféricos del microcontrolador, como el NVIC y
 el gestor de eventos (Event System), para lograr un control eficiente de las interrupciones y de los recursos
  del sistema.



  patriciocoronadocollado@gmail.com
Co un SAMD21 en la plataforma Arduino, ¿Como se limpia una interrupción de un pin?
El SAMD21 es un microcontrolador de la familia ARM Cortex-M0+ y es utilizado en algunas placas de la plataforma Arduino como la Arduino Zero y la MKR1000.

Para limpiar una interrupción de un pin en el SAMD21 se debe seguir los siguientes pasos:

Identificar el número del pin que generó la interrupción.
Verificar qué tipo de interrupción se generó (por ejemplo, una interrupción por cambio de nivel o una interrupción por flanco).
Borrar el flag de la interrupción en el registro correspondiente.
A continuación, se presenta un ejemplo de cómo limpiar una interrupción por cambio de nivel en el pin 2 de la placa Arduino Zero:

C++
Copy code
void setup() {
  // Configurar el pin 2 como entrada con pull-up activo
  pinMode(2, INPUT_PULLUP);
  
  // Habilitar la interrupción por cambio de nivel en el pin 2
  attachInterrupt(digitalPinToInterrupt(2), isr, CHANGE);
}

void loop() {
  // Hacer algo en el loop principal
}

void isr() {
  // Limpiar la interrupción por cambio de nivel en el pin 2
  uint32_t pinMask = digitalPinToBitMask(2);
  PORT->Group[PORTA].INTFLAG.reg = pinMask;
}
En este ejemplo, la función attachInterrupt se utiliza para habilitar la interrupción por cambio de nivel en el pin 2. Cuando se
 genera una interrupción, la función isr se ejecuta y limpia el flag de la interrupción en el registro INTFLAG del grupo de puertos PORTA.

Es importante destacar que en el SAMD21 hay varios grupos de puertos (PORTA, PORTB, PORTC, etc.) y cada uno tiene su propio registro INTFLAG.
 Además, dependiendo del tipo de interrupción, puede haber otros registros y configuraciones que se deben tener en cuenta para limpiar la 
 interrupción correctamente. Por lo tanto, se recomienda revisar la documentación del microcontrolador y de la placa Arduino en la que se está
  trabajando para conocer los detalles específicos